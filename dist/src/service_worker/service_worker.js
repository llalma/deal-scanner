var u=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var s=(t,e,a)=>new Promise((n,i)=>{var d=o=>{try{c(a.next(o))}catch(l){i(l)}},g=o=>{try{c(a.throw(o))}catch(l){i(l)}},c=o=>o.done?n(o.value):Promise.resolve(o.value).then(d,g);c((a=a.apply(t,e)).next())});var m=u(r=>{function y(t){return s(this,null,function*(){let e=yield chrome.storage.sync.get([t]);return console.log("get_item"),console.log(e),e.id?e:null})}function p(t,e){return s(this,null,function*(){const a=yield y(t);console.log(a);let n=e;a&&(n=Object.assign({},a,e)),console.log("update_item"),console.log(n),chrome.storage.sync.set({[t]:n})})}chrome.runtime.onMessage.addListener((t,e,a)=>s(r,null,function*(){switch(t.type){case"scan":console.log("scan");break;case"update":yield p(t.payload.key,t.payload.data);break;default:console.error(`Not a valid message type: ${t.type}`)}}))});export default m();
