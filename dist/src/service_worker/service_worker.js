var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var n=(t,e,a)=>new Promise((r,l)=>{var i=s=>{try{o(a.next(s))}catch(u){l(u)}},c=s=>{try{o(a.throw(s))}catch(u){l(u)}},o=s=>s.done?r(s.value):Promise.resolve(s.value).then(i,c);o((a=a.apply(t,e)).next())});import{s as p}from"../helpers/helpers.js";var v=f(d=>{function m(t,e){return n(this,null,function*(){const a=(yield chrome.storage.sync.get([t]))[t],r=Object.assign({},a,e);chrome.storage.sync.set({[t]:r})})}h();chrome.storage.onChanged.addListener((t,e)=>n(d,null,function*(){e==="sync"&&h()}));function h(){return n(this,null,function*(){const e=Object.entries(yield chrome.storage.sync.get()).filter((a,r)=>a[1].alert_bool).length;chrome.action.setBadgeText({text:String(e)})})}function g(t,e){return n(this,null,function*(){let a;switch(e){case 1:a="Unable to locate xpath on webpage"}yield m(t,{error_alert:{id:e,msg:a}})})}function y(t){return new Promise((e,a)=>{let r;const l=()=>{try{const o=document.evaluate(t,document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;if(o)return clearTimeout(r),e({error:!1,msg:o.textContent}),!0;if(c>25)throw new Exception("Could not find element on given xpath");return c++,!1}catch(o){return c>5?(e({error:!0,msg:"Could not find element on given xpath2"}),!0):(c++,!1)}},i=()=>{(document.readyState==="interactive"||document.readyState==="complete")&&l()||(setTimeout(i,100),c++)};let c=0;i()})}function _(t,e){return n(this,null,function*(){const a=yield chrome.scripting.executeScript({target:{tabId:t},func:y,args:[e]});if(a[0].result.error)throw new Error("Could not find xpath");return a[0].result})}function w(t,e){return n(this,null,function*(){const a=yield chrome.tabs.create({url:e.link,active:!0});try{const r=yield _(a.id,e.xpath);parseFloat(p(r))<parseFloat(e.target_price)&&(yield m(t,{alert_bool:!0}))}catch(r){yield g(t,1)}chrome.tabs.remove(a.id)})}function b(t){return n(this,null,function*(){yield Promise.all(t.map(r=>n(this,[r],function*([e,a]){yield w(e,a)})))})}chrome.runtime.onMessage.addListener((t,e,a)=>n(d,null,function*(){switch(t.type){case"scan":yield b(t.payload);break;case"update":yield m(t.payload.key,t.payload.data);break;case"remove_css":yield chrome.scripting.removeCSS({files:["src/injections/injection.css"],target:{tabId:e.tab.id}});break;default:console.error(`Not a valid message type: ${t.type}`)}}))});export default v();
